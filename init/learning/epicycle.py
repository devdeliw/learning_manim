import random
import numpy as np
import manim as mn
from svg.path import parse_path
from pathlib import Path

def integrate(func, a, b, *, dx=0.01):
    return sum(func(x) * dx for x in np.arange(a, b, dx))

class SVGPath(mn.VMobject):
    def __init__(self, path_str, *, num_points=500, **kwargs):
        self.path       = parse_path(path_str)
        self.num_points = num_points

        super().__init__(**kwargs)

    def point(self, alpha):
        z = self.path.point(alpha)

        return np.array([z.real, z.imag, 0])

    def generate_points(self):
        step = 1 / self.num_points

        points = [self.point(x) for x in np.arange(0, 1, step)]
        self.start_new_path(points[0])
        self.add_points_as_corners(points[1:])
        self.add_line_to(self.point(1))

        self.flip(mn.RIGHT)
        self.center()

        return self

class Epicycle(mn.VMobject):
    def __init__(self, path, coeff_start, coeff_end=None, *, num_points=500, **kwargs):
        self.num_points = num_points

        if coeff_end is None:
            coeff_end   = int(np.ceil(coeff_start / 2))
            coeff_start = coeff_end - coeff_start

        self.coeffs = self.gen_fourier_coeffs(path, coeff_start, coeff_end)

        super().__init__(**kwargs)

    def generate_points(self):
        step = 1 / self.num_points

        points = [self.point(x) for x in np.arange(0, 1, step)]
        self.start_new_path(points[0])
        self.add_points_as_corners(points[1:])
        self.add_line_to(points[0])

        return self

    def point(self, alpha):
        z = sum(radius * np.exp(alpha * speed * mn.TAU * 1j) for speed, radius in self.coeffs.items())

        return np.array([z.real, z.imag, 0])

    def gen_fourier_coeffs(self, path, start, end):
        def point(alpha):
            pt = path.point_from_proportion(alpha) - path.get_center()

            return complex(pt[0], pt[1])

        # speed: radius
        return {i: integrate(lambda x: point(x) * np.exp(x * -i * mn.TAU * 1j), 0, 1) for i in range(start, end)}

    def draw_circles(self, alpha, whole_mobject=None, **kwargs):
        if whole_mobject is None:
            whole_mobject = self.copy()

        self.submobjects.clear()

        self.pointwise_become_partial(whole_mobject, 0, alpha)

        speeds_and_radii = sorted(self.coeffs.items(), key=lambda x: abs(x[1]), reverse=True)

        z = 0
        for speed, radius in speeds_and_radii:
            circ = mn.Circle(**kwargs)
            circ.scale(abs(radius))
            circ.move_to([z.real, z.imag, 0])
            self.add(circ)

            z += radius * np.exp(alpha * speed * mn.TAU * 1j)

        return self

    def animate_circles(self, **kwargs):
        class Draw(mn.Animation):
            def interpolate_submobject(self, submobject, starting_submobject, alpha):
                submobject.draw_circles(alpha, starting_submobject, **kwargs)

        return Draw(self)

class EpicCycle(mn.Scene):
    path_str = "M 766.67,733.33C 766.67,733.33 750.01,733.33 750.01,733.33750.01,733.33 750.01,716.66 750.01,716.66750.01,707.46 742.54,699.99 733.34,699.99733.34,699.99 683.34,699.99 683.34,699.99683.34,699.99 683.34,683.33 683.34,683.33683.34,661.63 669.37,643.29 650.00,636.39650.00,636.39 650.00,263.58 650.00,263.58669.37,256.68 683.34,238.35 683.34,216.64683.34,216.64 683.34,199.98 683.34,199.98683.34,199.98 766.67,199.98 766.67,199.98774.51,199.98 781.31,194.51 782.97,186.81784.64,179.14 780.71,171.38 773.57,168.11773.57,168.11 406.89,1.44 406.89,1.44406.69,1.34 406.49,1.37 406.29,1.30405.09,0.80 403.79,0.67 402.46,0.47401.49,0.34 400.59,-0.03 399.66,0.00398.26,0.04 396.89,0.54 395.53,0.90394.73,1.14 393.86,1.07 393.10,1.44393.10,1.44 26.41,168.11 26.41,168.1124.44,169.01 22.81,170.28 21.38,171.7420.88,172.24 20.58,172.84 20.15,173.4119.35,174.48 18.61,175.54 18.11,176.7417.81,177.47 17.65,178.21 17.41,179.0117.08,180.18 16.88,181.31 16.81,182.5416.78,183.41 16.81,184.24 16.91,185.1116.98,185.68 16.85,186.24 16.98,186.8117.11,187.48 17.51,188.01 17.71,188.6417.88,189.17 17.85,189.71 18.08,190.2118.18,190.48 18.48,190.54 18.61,190.8119.91,193.28 21.68,195.34 23.95,196.8824.41,197.21 24.88,197.41 25.35,197.6827.78,199.01 30.41,199.98 33.31,199.9833.31,199.98 116.65,199.98 116.65,199.98116.65,199.98 116.65,216.64 116.65,216.64116.65,238.35 130.62,256.68 149.98,263.58149.98,263.58 149.98,636.39 149.98,636.39130.62,643.29 116.65,661.63 116.65,683.33116.65,683.33 116.65,700.00 116.65,700.00116.65,700.00 66.65,700.00 66.65,700.0057.45,700.00 49.98,707.46 49.98,716.6649.98,716.66 49.98,733.33 49.98,733.3349.98,733.33 33.31,733.33 33.31,733.3324.11,733.33 16.64,740.80 16.64,750.0016.64,750.00 16.64,783.33 16.64,783.3316.64,792.53 24.11,800.00 33.31,800.0033.31,800.00 766.67,800.00 766.67,800.00775.87,800.00 783.34,792.53 783.34,783.33783.34,783.33 783.34,750.00 783.34,750.00783.34,740.80 775.87,733.33 766.67,733.33 ZM 650.00,216.64C 650.00,225.81 642.54,233.31 633.34,233.31633.34,233.31 566.67,233.31 566.67,233.31557.47,233.31 550.00,225.81 550.00,216.64550.00,216.64 550.00,199.98 550.00,199.98550.00,199.98 650.00,199.98 650.00,199.98650.00,199.98 650.00,216.64 650.00,216.64650.00,216.64 650.00,216.64 650.00,216.64 ZM 450.00,636.39C 450.00,636.39 450.00,263.58 450.00,263.58469.36,256.68 483.33,238.35 483.33,216.64483.33,216.64 483.33,199.98 483.33,199.98483.33,199.98 516.66,199.98 516.66,199.98516.66,199.98 516.66,216.64 516.66,216.64516.66,238.35 530.63,256.68 550.00,263.58550.00,263.58 550.00,636.39 550.00,636.39530.63,643.29 516.66,661.63 516.66,683.33516.66,683.33 516.66,700.00 516.66,700.00516.66,700.00 483.33,700.00 483.33,700.00483.33,700.00 483.33,683.33 483.33,683.33483.33,661.63 469.36,643.29 450.00,636.39 ZM 249.99,636.39C 249.99,636.39 249.99,263.58 249.99,263.58269.36,256.68 283.32,238.35 283.32,216.64283.32,216.64 283.32,199.98 283.32,199.98283.32,199.98 316.66,199.98 316.66,199.98316.66,199.98 316.66,216.64 316.66,216.64316.66,238.35 330.62,256.68 349.99,263.58349.99,263.58 349.99,636.39 349.99,636.39330.62,643.29 316.66,661.63 316.66,683.33316.66,683.33 316.66,700.00 316.66,700.00316.66,700.00 283.32,700.00 283.32,700.00283.32,700.00 283.32,683.33 283.32,683.33283.32,661.63 269.35,643.29 249.99,636.39 ZM 166.65,233.31C 157.45,233.31 149.98,225.81 149.98,216.64149.98,216.64 149.98,199.98 149.98,199.98149.98,199.98 249.99,199.98 249.99,199.98249.99,199.98 249.99,216.64 249.99,216.64249.99,225.81 242.52,233.31 233.32,233.31233.32,233.31 166.65,233.31 166.65,233.31166.65,233.31 166.65,233.31 166.65,233.31 ZM 216.65,266.65C 216.65,266.65 216.65,633.33 216.65,633.33216.65,633.33 183.32,633.33 183.32,633.33183.32,633.33 183.32,266.65 183.32,266.65183.32,266.65 216.65,266.65 216.65,266.65 ZM 349.99,683.33C 349.99,674.16 357.46,666.66 366.66,666.66366.66,666.66 433.33,666.66 433.33,666.66442.53,666.66 450.00,674.16 450.00,683.33450.00,683.33 450.00,700.00 450.00,700.00450.00,700.00 349.99,700.00 349.99,700.00349.99,700.00 349.99,683.33 349.99,683.33349.99,683.33 349.99,683.33 349.99,683.33 ZM 383.33,633.33C 383.33,633.33 383.33,266.65 383.33,266.65383.33,266.65 416.66,266.65 416.66,266.65416.66,266.65 416.66,633.33 416.66,633.33416.66,633.33 383.33,633.33 383.33,633.33383.33,633.33 383.33,633.33 383.33,633.33 ZM 433.33,233.31C 433.33,233.31 366.66,233.31 366.66,233.31357.46,233.31 349.99,225.81 349.99,216.64349.99,216.64 349.99,199.98 349.99,199.98349.99,199.98 449.99,199.98 449.99,199.98449.99,199.98 449.99,216.64 449.99,216.64450.00,225.81 442.53,233.31 433.33,233.31 ZM 550.00,683.33C 550.00,674.16 557.47,666.66 566.67,666.66566.67,666.66 633.34,666.66 633.34,666.66642.54,666.66 650.01,674.16 650.01,683.33650.01,683.33 650.01,700.00 650.01,700.00650.01,700.00 550.00,700.00 550.00,700.00550.00,700.00 550.00,683.33 550.00,683.33550.00,683.33 550.00,683.33 550.00,683.33 ZM 583.33,633.33C 583.33,633.33 583.33,266.65 583.33,266.65583.33,266.65 616.67,266.65 616.67,266.65616.67,266.65 616.67,633.33 616.67,633.33616.67,633.33 583.33,633.33 583.33,633.33583.33,633.33 583.33,633.33 583.33,633.33 ZM 110.25,166.64C 110.25,166.64 399.99,34.94 399.99,34.94399.99,34.94 689.74,166.64 689.74,166.64689.74,166.64 110.25,166.64 110.25,166.64 ZM 149.98,683.33C 149.98,674.16 157.45,666.66 166.65,666.66166.65,666.66 233.32,666.66 233.32,666.66242.52,666.66 249.99,674.16 249.99,683.33249.99,683.33 249.99,700.00 249.99,700.00249.99,700.00 149.99,700.00 149.99,700.00149.99,700.00 149.99,683.33 149.99,683.33149.99,683.33 149.98,683.33 149.98,683.33 ZM 66.65,766.67C 75.85,766.67 83.31,759.20 83.31,750.0083.31,750.00 83.31,733.33 83.31,733.3383.31,733.33 716.67,733.33 716.67,733.33716.67,733.33 716.67,750.00 716.67,750.00716.67,759.20 724.14,766.67 733.34,766.67733.34,766.67 66.65,766.67 66.65,766.67 Z"
    def construct(self):
        # Scale because I don't want to edit the SVG because I'm lazy
        path = SVGPath(self.path_str).scale(0.01)
        path.set_color(mn.TEAL_B).set_opacity(0.8)

        self.add(path)

        for num_coeffs in range(5, 105 + 1, 20):
            ep = Epicycle(path, num_coeffs)
            ep_copy = ep.copy().draw_circles(0, color=mn.MAROON_A)

            text = mn.Tex(f"").to_edge(mn.UP).shift(mn.LEFT)

            self.play(mn.FadeIn(mn.VGroup(ep_copy, text)), run_time=0.75)
            self.remove(ep_copy)

            self.play(ep.animate_circles(color=mn.MAROON_A), run_time=10, rate_func=mn.linear)

            self.play(mn.FadeOut(mn.VGroup(ep, text)), run_time = 4)
